
from io import BytesIO
import os
import re
import subprocess
from tempfile import NamedTemporaryFile, TemporaryDirectory
import cv2
import numpy as np
import openpyxl
from paddleocr import PPStructure
import pandas as pd
from pdf2image import convert_from_bytes
from copy import deepcopy

ROOTDIR = os.path.dirname(os.path.abspath(__file__))

table_engine = PPStructure(
    lang = 'ch',
    show_log = False, 
    # image_orientation = True,
    # det_model_dir = os.path.join(ROOTDIR, 'model\\ch_ppocr_server_v2.0_det_infer'), 
    # rec_model_dir = os.path.join(ROOTDIR, 'model\\ch_ppocr_server_v2.0_rec_infer'), 
    # table_model_dir = os.path.join(ROOTDIR, 'model\\cn_ppstructure_mobile_v2.0_SLANet_infer'), 
    # layout_model_dir = os.path.join(ROOTDIR, 'model\\picodet_lcnet_x1_0_fgd_layout_cdla_infer')
)

def pdf_to_img(pdf_bytes, tmp_file_paths):
    image_bytes = []
    images = convert_from_bytes(pdf_bytes)
    for image in images:
        with NamedTemporaryFile(dir=os.path.join(ROOTDIR, 'tmp'), delete=False, suffix=".jpg") as tmp:
            tmp_file_paths.append(tmp.name)
            image.save(tmp.name, 'JPEG')
            tmp.seek(0)
            bytes = tmp.read()
            image_bytes.append(bytes)
    return image_bytes

def merge_array(*arr):
    result = []
    for a in arr:
        result.extend(a)
    return result

def remove_rowspan(table):
    table = table.splitlines()
    new_table = []
    pattern = "<td rowspan=\"(\\d)\">(.*)</td>"
    rowspans = 0
    for line in table:
        match_rowspans = re.search(pattern, line)
        if match_rowspans:
            rowspans = int(match_rowspans.group(1)) - 1
            line = re.sub(pattern, "<td>" + match_rowspans.group(2) + "</td>", line)
        if rowspans > 0 and "<tr>" in line:
            line = line.replace("<tr>", "<tr><td> </td>")
            rowspans = rowspans - 1
        new_table.append(line)
        new_table_str = '\n'.join(new_table)
    return new_table_str

def result_to_table_bytes(result, tmp_file_paths): 
    tables = []
    # res_cp = deepcopy(result)
    for region in result:
        if region['type'].lower() == 'table' and len(region['res']) > 0 and 'html' in region['res']:
            # try :
            #     wb = tablepyxl.document_to_workbook(region['res']['html'])
            #     with NamedTemporaryFile(dir=os.path.join(ROOTDIR, 'tmp'), delete=False) as tmp:
            #         wb.save(tmp.name)
            #         tmp.seek(0)
            #         bytes = tmp.read()
            #         tables.append(bytes)
            # except Exception as e:
            #     print(e)
            # table_all.append(region['res']['html'])

            # html = remove_rowspan(region['res']['html'])
            try: 
                # table_origin.append(region['res']['html'])
                with NamedTemporaryFile(dir=os.path.join(ROOTDIR, 'tmp'), suffix=".xlsx", delete=False) as tmp:
                    tmp_file_paths.append(tmp.name)
                    t = pd.read_html(region['res']['html'])[0]
                    t.to_excel(tmp.name, index=False, header=False)
                    tmp.seek(0)
                    bytes = tmp.read()
                    tables.append(bytes)
            except Exception as e:
                print(e)
    return tables

def remove_spaces(s):
    r = ''
    try:
        r = s.replace(' ', '')
    except:
        r = s
    return r

def combine_tables(tables):
    result = BytesIO()
    writer = pd.ExcelWriter(result, engine='openpyxl') #xlsxwriter
    len_pre = 1
    for i, table in enumerate(tables):
        df = pd.read_excel(BytesIO(table)).applymap(remove_spaces)
        df.to_excel(writer, index=False, startrow=len_pre + i * 2)
        # writer.sheets['Sheet1'].row_dimensions[len_pre + i * 2].height = 40
        len_pre += len(df)
        # fill next row with yellow
        writer.sheets['Sheet1'].row_dimensions[len_pre + 2 + i * 2].fill = openpyxl.styles.PatternFill(fill_type='solid', start_color='21B2AA', end_color='21B2AA')
    writer.save()
    return result.getvalue()

def pdf_to_excel(pdf_bytes):
    # tmp_file_paths = []
    # image_bytes = pdf_to_img(pdf_bytes, tmp_file_paths)
    # result = []
    # for image_byte in image_bytes:
    #     img = cv2.imdecode(np.frombuffer(image_byte, np.uint8), cv2.IMREAD_COLOR)
    #     result.append(result_to_table_bytes(table_engine(img), tmp_file_paths))
    # r = merge_array(*result)
    # xlsx = combine_tables(r)
    # # remove all files in tmp_file_paths
    # for tmp_file_path in tmp_file_paths:
    #     os.remove(tmp_file_path)
    # return xlsx

    # tmp_file_paths = []
    images = convert_from_bytes(pdf_bytes)
    with TemporaryDirectory(dir=os.path.join(ROOTDIR, 'tmp')) as tmp_dir:
        for idx, image in enumerate(images):
            name = os.path.join(tmp_dir, str(idx) + '.jpg')
            # tmp_file_paths.append(name)
            image.save(name, 'JPEG')

        result = []
        # wirte a command execute 'paddleocr --image_dir=tmp_dir --type=structure --layout=false --output=tmp_dir'
        os.chdir("C:/Users/zzz/anaconda3/envs/paddle_env/Scripts")
        subprocess.call('paddleocr --image_dir=' + tmp_dir + ' --type=structure --layout=false --output=' + tmp_dir, shell=True)
        # os.chdir(os.path.join(ROOTDIR, 'PaddleOCR', 'ppstructure'))
        # subprocess.run(['python', 'predict_system.py', '--image_dir', tmp_dir, '--type', 'structure', '--layout', 'false', '--output', tmp_dir])
        # walk through tmp_dir and get all xlsx files
        for root, dirs, files in os.walk(tmp_dir):
            for file in files:
                if file.endswith('.xlsx'):
                    with open(os.path.join(root, file), 'rb') as f:
                        result.append(f.read())
        xlsx = combine_tables(result)
        return xlsx


        # execute paddleocr 

# for line in result:
#     line.pop('img')
#     print(line)

# from PIL import Image

# font_path = os.path.join(ROOTDIR, 'font/simsun.ttf')
# image = Image.open(img_path).convert('RGB')
# im_show = draw_structure_result(image, result, font_path = font_path)
# im_show = Image.fromarray(im_show)
# im_show.save('result.jpg')

# to_excel(result, 'result.xlsx')

# save_folder = './output'
# img_path = os.path.join(ROOTDIR, 'img/08.jpg')
# img = cv2.imread(img_path)
# # img = cv2.imdecode(np.frombuffer(img_bytes, np.uint8), cv2.IMREAD_COLOR)
# result0 = table_engine(img)
# # save_structure_res(result, save_folder, os.path.basename(img_path).split('.')[0])

# img_path = os.path.join(ROOTDIR, 'img/09.jpg')
# img = cv2.imread(img_path)
# result1 = table_engine(img)

# b0 = result_to_table_bytes(result0)
# b1 = result_to_table_bytes(result1)
# b = merge_array(b0, b1)
# excel = combine_tables(b)
# # write to save_folder
# with open(os.path.join(ROOTDIR, save_folder, 'result.xlsx'), 'wb') as f:
#     f.write(excel)

# PDF转图片
# 图片转Excel
# Excel合并
